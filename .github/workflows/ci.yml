name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Security Scan: Ruby
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.4
          bundler-cache: true
      - name: Brakeman Scan
        run: bundle exec brakeman -q --no-exit-on-warn

  # Security Scan: JavaScript (Importmap audit)
  scan_js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.4
          bundler-cache: true
      - name: Importmap Audit
        run: bundle exec importmap audit

  # Test Rails App against SQL Server
  test:
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/azure-sql-edge
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: YourStrong@Passw0rd
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.4
          bundler-cache: true
          
      - name: Install FreeTDS
        run: sudo apt-get update && sudo apt-get install -y freetds-dev

      - name: Wait for SQL Server
        run: |
          for i in {1..30}; do
            /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q "SELECT 1" && break
            echo "SQL Server not ready yet..."
            sleep 2
          done

      - name: Create test database
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q "IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = N'EVICTION_TEST_CI') CREATE DATABASE [EVICTION_TEST_CI];"

      - name: Setup DB
        run: |
          cp config/database.yml.ci config/database.yml
          RAILS_ENV=test bundle exec rails db:drop db:create db:migrate

      - name: Run Tests
        run: PARALLEL_WORKERS=1 bundle exec rails test
        env:
          RAILS_ENV: test

  # Build & Push Docker Image
  docker:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      # Login to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build & Push
      - name: Build and Push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/rails-app
          docker build -t $IMAGE_NAME:${{ github.sha }} .
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Generate docker-compose.yml
        run: |
          cat > docker-compose.yml <<'EOF'
          version: "3.8"
          services:
            db:
              image: mcr.microsoft.com/azure-sql-edge
              environment:
                ACCEPT_EULA: "Y"
                MSSQL_SA_PASSWORD: "YourStrong@Passw0rd"
              ports:
                - "1433:1433"
              volumes:
                - ./SQLData:/var/opt/mssql
            web:
              image: ghcr.io/${{ github.repository }}/rails-app:${{ github.sha }}
              command: bundle exec rails s -b 0.0.0.0 -p 3000
              ports:
                - "3000:3000"
              depends_on:
                - db
              environment:
                DATABASE_HOST: db
                DATABASE_PORT: 1433
                DATABASE_USERNAME: sa
                DATABASE_PASSWORD: YourStrong@Passw0rd
                DATABASE_NAME: EVICTION_PROD
          EOF
